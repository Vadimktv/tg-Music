import os
import re
import asyncio
from contextlib import suppress

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

import httpx
from bs4 import BeautifulSoup

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set. Put it into .env or environment variables.")

bot = Bot(BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

YANDEX_URL_RE = re.compile(r'(https?://(?:music\.)?yandex\.(?:ru|by|kz|ua|uz|com)/[^\s]+)', re.IGNORECASE)

async def fetch_og(url: str) -> dict:
    headers = {"User-Agent": "Mozilla/5.0 (compatible; Bot/1.0)"}
    async with httpx.AsyncClient(timeout=10, headers=headers, follow_redirects=True) as client:
        r = await client.get(url)
        r.raise_for_status()
    soup = BeautifulSoup(r.text, "html.parser")
    def get(prop: str):
        tag = soup.find("meta", property=prop)
        return tag.get("content") if tag else None
    title = get("og:title") or "–¢—Ä–µ–∫ –≤ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ"
    image = get("og:image")
    final_url = get("og:url") or url
    return {"title": title, "image": image, "url": final_url}

@dp.message(F.text.startswith("/start"))
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫/–∞–ª—å–±–æ–º –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏ ‚Äî –ø—Ä–∏—à–ª—é –∫–∞—Ä—Ç–æ—á–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –æ–±–ª–æ–∂–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π ‚Äò–û—Ç–∫—Ä—ã—Ç—å‚Äô.\n"
        "–ú–æ–∂–µ—à—å —Ç–∞–∫–∂–µ –ø—Ä–∏—Å–ª–∞—Ç—å —Å–≤–æ–π MP3 (–ª–µ–≥–∞–ª—å–Ω—ã–π) ‚Äî –≤–µ—Ä–Ω—É —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å Telegram –≤—Ä—É—á–Ω—É—é."
    )

@dp.message(F.text.regexp(YANDEX_URL_RE))
async def handle_yandex_link(message: Message):
    url_match = YANDEX_URL_RE.search(message.text or "")
    if not url_match:
        await message.answer("–ü—Ä–∏—à–ª–∏ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫—É.")
        return
    url = url_match.group(1)
    try:
        og = await fetch_og(url)
        kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ", url=og["url"])]]
        )
        if og["image"]:
            await message.answer_photo(
                photo=og["image"],
                caption=f"üéµ <b>{og['title']}</b>\n–ò—Å—Ç–æ—á–Ω–∏–∫: –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞",
                reply_markup=kb
            )
        else:
            await message.answer(f"üéµ <b>{og['title']}</b>\n{og['url']}", reply_markup=kb)
    except Exception:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ. –ü—Ä–∏—à–ª–∏ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫/–∞–ª—å–±–æ–º –µ—â—ë —Ä–∞–∑.")

@dp.message(F.audio | F.document)
async def handle_audio(message: Message):
    file_id = None
    if message.audio:
        file_id = message.audio.file_id
    elif message.document and (message.document.mime_type or "").startswith("audio/"):
        file_id = message.document.file_id

    if not file_id:
        await message.answer("–ü—Ä–∏—à–ª–∏ MP3 –∫–∞–∫ –∞—É–¥–∏–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ç–∏–ø–æ–º audio/*")
        return

    await message.answer_audio(
        audio=file_id,
        caption="–ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ –ø–æ—Å—Ç–∞–≤—å –µ–≥–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ Telegram –≤—Ä—É—á–Ω—É—é: –ü—Ä–æ—Ñ–∏–ª—å ‚Üí –ò–∑–º–µ–Ω–∏—Ç—å ‚Üí –ú—É–∑—ã–∫–∞."
    )

@dp.message()
async def fallback(message: Message):
    await message.answer("–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫—É –∏–ª–∏ MP3-—Ñ–∞–π–ª. –ö–æ–º–∞–Ω–¥–∞: /start")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    with suppress(KeyboardInterrupt, SystemExit):
        asyncio.run(main())
